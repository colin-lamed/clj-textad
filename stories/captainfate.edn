;; Sample Story
;;
;; Based on: http://www.inform-fiction.org/manual/about_ibg.html --

;;

(refer 'textad.main)

{
  :name "Captain Fate"
  :description "A small example of how to write interactive fiction"

  :debug true


  ; -- Templates --------------------------------

  :room {
    :description "UNDERCONSTRUCTION"
    :has #{:light}
  }

  :appliance {
    :has #{:scenery}
    :interceptors {
      :before {
        #{:take :pull :push :push-dir} (fn [] "Even though your SCULPTED adamantine muscles are up to the task, you don't favour property damage.")
      }
    }
  }

  ; =============== OBJECTS =================

  :library-messages {
    :interceptors {
      :before {
        #{:buy}    (fn [] "Petty commerce interests you only on COUNTED occasions.")
        #{:dig}    (fn [] "Your keen senses detect NOTHING underground worth your immediate attention.")
        #{:pray}   (fn [] "You won't need to bother almighty DIVINITIES to save the day.")
        #{:sing}   (fn [] "Alas! That is not one of your many superpowers.")
        #{:sleep}  (fn [] "A hero is ALWAYS on the watch.")
;        #{:sorry}  (fn [] "Captain FATE prefers ACTION over apologies.")
;        #{:strong}  (fn [] "An unlikely vocabulary for a HERO like you.")
        #{:swim}  (fn [] "You quickly turn all your ATTENTION towards locating a suitable place to EXERCISE your superior strokes, but alas! you find none.")
      }
    }
  }


  ; -- game objects  --
  :street {
    :template :room
    :name "On the street"
    :synonyms #{"city" "buildings" "skyscrapers" "shops" "apartments" "cars"}
    :description (fn []
      (if (has-child :booth :player)
        "From this VANTAGE point, you are rewarded with a broad view of the sidewalk and the entrance to Benny's cafe."
        "On one side -- which your HEIGHTENED sense of direction indicates is NORTH -- there's an open cafe now serving lunch. To the south, you can see a phone booth."))
    :n_to (fn []
      (binding [noun :outside_of_cafe]
        (execute :enter)))
    :s_to (fn []
      (binding [noun :booth]
        (execute :enter)))
    :in_to "But which way?"
    :messages {:cant_go "No time now for exploring! You'll move much faster in your Captain FATE costume."}
    ;// -- TODO instead of specifying a message value, should use execute and intercept the situation -->
  }


  :pedestrians {
    :name "pedestrians"
    :synonyms #{"passing" "people" "pedestrians"}
    :description "They're just PEOPLE going about their daily HONEST business."
    :where :street
    :has #{:pluralname :scenery :animate}
    :interceptors {
      :before {
        #{:examine} #(-> true)
        #{:default} "The passing pedestrians are of NO concern to you."
      }
    }
  }

  :booth {
    :template :appliance
    :name "phone booth"
    :synonyms #{"old" "red" "picturesque" "phone" "booth" "cabin" "telephone" "box"}
    :description "It's one of the old picturesque models, a red cabin with room for one caller."
    :where :street
    :has #{:enterable :container :open}
    :interceptors {
      :before {
        #{:open} "The booth is already open."
        #{:close} "There's no way to close this booth."
      }
      :after {
        #{:enter} "With implausible celerity, you dive inside the phone booth."
      }
    }
  }

  :sidewalk {
    :template :appliance
    :where :street
    :name "sidewalk"
    :article "the"
    :synonyms #{"sidewalk" "pavement" "street"}
    :description "You make a quick surveillance of the sidewalk and discover much to your surprise that it looks JUST like any other sidewalk in the CITY!"
  }

  :outside_of_cafe {
    :template :appliance
    :name "Benny's cafe"
    :synonyms #{"benny's" "cafe" "entrance"}
    :description "The town's favourite for a quick snack, Benny's cafe has a 50's ROCKETSHIP look."
    :where :street
    :has #{:enterable :proper}
    :interceptors {
      :before {
        #{:enter} (fn []
          (println "With an impressive mixture of hurry and nonchalance you step into the open cafe.\n")
          (move-to :player :cafe)
          false) ; if we continue, will take enter cafe to mean: enter this_room
      }
    }
  }

;  //<!-- ============================================================================== -->

  :cafe {
    :template :room
    :name "Inside Benny's cafe"
    :description "Benny's offers the FINEST selection of pastries and sandwiches. Customers clog the counter, where Benny himself manages to serve, cook and charge without missing a step. At the north side of the cafe you can see a red door connecting with the toilet."
    :interceptors {
      :before {
        #{:go} (fn [] (cond
          ; The player is about to depart. Is he making for the street?
          (not (= noun :s_to)) true
          (or (get-in @story [:benny :coffee_not_paid])
               (get-in @story [:benny :key_not_returned])) (do
            (println "Just as you are stepping into the street, the big hand of Benny falls on your shoulder.")
            (cond
              (and (get-in @story [:benny :coffee_not_paid])
                    (get-in @story [:benny :key_not_returned]))
                (println "\n\n\"Hey! You've got my key and haven't paid for the coffee. Do I look like a chump?\" You apologise as only a HERO knows how to do and return inside.\n")
              (get-in @story [:benny :coffee_not_paid])
                (println "\n\n\"Just waidda minute here, Mister,\" he says. \"Sneaking out without paying, are you?\" You quickly mumble an excuse and go back into the cafe. Benny returns to his chores with a mistrusting eye.\n")
              (get-in @story [:benny :key_not_returned])
                (println "\n\n\"Just where you think you're going with the toilet key?\" he says. \"You a thief?\" As Benny forces you back into the cafe, you quickly assure him that it was only a STUPEFYING mistake.\n")))
          (has :costume :worn) (do
            (println "You step onto the sidewalk, where the passing pedestrians recognise the rainbow EXTRAVAGANZA of Captain FATE's costume and cry your name in awe as you JUMP with sensational momentum into the BLUE morning skies!\n")
            (end-game "victory"))
          :else true))
      }
;      // TODO enter door (when in toilet) does not use GoSub, and thus doesn't trigger daemon. Only leaving toilet with "south" will work. This is why it should use GoSub...
      :after {
        #{:go} (fn [] (cond
;        The player has just arrived. Did he come from the toilet?
          (not (= noun :s_to)) true
          (and (has :costume :worn) (not (get-in @story [:cafe :first_time_out]))) (do
            (swap! story assoc-in [:cafe :first_time_out] true)
            (start-daemon :customers)
            true)
          :else false))
      }
    }
    :first_time_out false ; Captain Fate's first appearance?
    :s_to :street
    :n_to :toilet_door
  }

  :counter {
    :template :appliance
    :where :cafe
    :name "counter"
    :article "the"
    :synonyms #{"counter" "bar"}
    :description "The counter is made of an astonishing ALLOY of metals, STAIN-PROOF, SPILL-RESISTANT and VERY EASY to clean. Customers enjoy their snacks with UTTER tranquillity, safe in the notion that the counter can take it all."
    :has #{:supporter}
    :interceptors {
      :before {
        #{:receive} (fn []
          (binding [noun noun second :benny]
            (execute :giveSub))
          false)
      }
    }
  }

  :food {
    :where :cafe
    :name "Benny's snacks"
    :synonyms #{"food" "pastry" "pastries" "sandwich" "sandwiches" "snack" "snacks" "doughnut"}
    :has #{:scenery :proper}
    :interceptors {
      :before {
        #{:default} (fn [] "There is no time for FOOD right now.")
      }
    }
  }

  :menu {
    :where :cafe
    :name "menu"
    :synonyms #{"informative" "menu" "board" "picture" "writing"}
    :description "The menu board lists Benny's food and drinks, along with their prices. Too bad you've never learnt how to read, but luckily there is a picture of a big cup of coffee among the incomprehensible writing."
    :has #{:scenery}
    :interceptors {
      :before {
        #{:take} (fn [] "The board is mounted on the wall behind Benny. Besides, it's useless WRITING.")
      }
    }
  }

  :customers {
    :where :cafe
    :name "customers"
    :synonyms #{"customers" "people" "customer" "men" "women"}
    :description (fn []
      (if (has :costume :worn)
        "Most seem to be concentrating on their food, but some do look at you quite blatantly. Must be the MIND-BEFUDDLING colours of your costume."
        "A group of HELPLESS and UNSUSPECTING mortals, the kind Captain FATE swore to DEFEND the day his parents choked on a DEVIOUS slice of RASPBERRY PIE."))
    :has #{:scenery :animate :pluralname}
    :interceptors {
      :life {
        #{:ask :tell :answer} (fn []
          (if (has :costume :worn)
            "People seem to MISTRUST the look of your FABULOUS costume."
            "As John Covarth, you attract LESS interest than Benny's food."))
      }
      :before {
        #{:kiss} (fn [] "There's no telling what sorts of MUTANT bacteria these STRANGERS may be carrying around.")
        #{:attack} (fn [] "Mindless massacre of civilians is the qualification for VILLAINS. You are SUPPOSED to protect the likes of these people.")
      }
      :orders {
        #{:default} (fn [] "These people don't appear to be of the cooperative sort.")
      }
    }
    :number_of_comments 0 ; for counting the customer comments
    :daemon (fn []
      (if (= location :cafe)
        (cond
          (= (get-in @story [:customers :number_of_comments]) 0) (do
            (swap! story update-in [:customers :number_of_comments] inc)
            (println "\nNearby customers glance at your costume with open curiosity.\n"))
          (= (rand-int 2) 1) (do ; do this 50% of the time
            (swap! story update-in [:customers :number_of_comments] inc)
            (case (get-in @story [:customers :number_of_comments])
              2 "\n\"Didn't know there was a circus in town,\" comments one customer to another. \"Seems like the clowns have the day off.\""
              3 "\n\"These fashion designers don't know what to do to show off,\" snorts a fat gentleman, looking your way. Those within earshot try to conceal their smiles."
              4 "\n\"Must be carnival again,\" says a man to his wife, who giggles, stealing a peek at you. \"Time sure flies.\""
              5 "\n\"Bad thing about big towns\", comments someone to his table companion, \"is you get the damnedest bugs coming out from toilets.\""
              6 "\n\"I sure WISH I could go to work in my pyjamas,\" says a girl in an office suit to some colleagues. \"It looks SO comfortable.\""
              (stop-daemon self))))))
  }

  :benny {
    :name "Benny"
    :synonyms #{"benny"}
    :description "A deceptively FAT man of uncanny agility, Benny entertains his customers crushing coconuts against his forehead when the mood strikes him."
    :where :cafe
    :has #{:scenery :animate :male :proper :transparent}
    :interceptors {
      :life {
        #{:give} (fn [] (case noun
          :clothes "You NEED your unpretentious John Covarth clothes."
          :costume "You NEED your stupendous ACID-PROTECTIVE suit."
          :toilet_key (do
            (swap! story assoc-in [:benny :key_not_returned] false)
            (move-to :toilet_key self)
            "Benny nods as you ADMIRABLY return his key.\n")
          :coin (do
            (dissoc-child :coin)
            (swap! story assoc-in [:benny :coffee_not_paid] false)
            (str "With marvellous ILLUSIONIST gestures, you produce the coin from the depths of your "
              (if (has :costume :worn) "BULLET-PROOF costume" "ordinary street clothes"))
              " as if it had dropped on the counter from Benny's ear! People around you clap politely. Benny takes the coin and gives it a SUSPICIOUS bite. \"Thank you, sir. Come back anytime,\" he says.")))
        #{:attack} (fn []
          (if (has :costume :worn) (do
            (println "Before the horror-stricken eyes of the surrounding people, you MAGNIFICENTLY jump OVER the counter and attack Benny with REMARKABLE, albeit NOT sufficient, speed. Benny receives you with a TREACHEROUS upper-cut that sends your GRANITE JAW flying through the cafe.\n\n \"These guys in pyjamas think they can bully innocent folk,\" snorts Benny, as the EERIE hands of DARKNESS engulf your vision and you lose consciousness.")
            (end-game "death"))
          "That would be an unlikely act for MEEK John Covarth."))
        #{:kiss} (fn [] "This is no time for MINDLESS infatuation.")
        #{:ask :tell :answer} (fn [] "Benny is too busy for idle chit-chat.")
      }
      :orders {
        #{:give} (fn []
          (if (not (= second :player))
            "Benny looks at you strangely."
            (case noun
              :toilet_key (cond
                (has-child :player :toilet_key) "But you DO have the key already."
                (get-in @story [:benny :coffee_asked_for])(cond
                  (has-child self :toilet_key) (do
                    (move-to :toilet_key :player)
                    (swap! story assoc-in [:benny :key_not_returned] true)
                    "Benny tosses the key to the rest rooms on the counter, where you grab it with a dextrous and precise movement of your HYPER-AGILE hand.")
                  :else "\"Last place I saw that key, it was in YOUR possession,\" grumbles Benny. \"Be sure to return it before you leave.\"")
                :else "\"Toilet is only fer customers,\" he grumbles, looking pointedly at a menu board behind him.")
              :coffee (if (get-in @story [:benny :coffee_asked_for])
                "One coffee should be enough."
                (do
                  (move-to :coffee :counter)
                  (swap! story assoc-in [:benny :coffee_asked_for] true)
                  (swap! story assoc-in [:benny :coffee_not_paid] true)
                  "With two gracious steps, Benny places his world-famous Cappuccino in front of you."))
              :food "Food will take too much time, and you must change NOW."
              :menu "With only the smallest sigh, Benny nods towards the menu on the wall behind him."
              "\"I don't think that's on the menu, sir.\"")))
      }
    }
    :coffee_asked_for false ; has player asked for a coffee?
    :coffee_not_paid false ; is Benny waiting to be paid?
    :key_not_returned false ; is Benny waiting for the key?
  }


  :coffee {
    :where :benny
    :name "cup of coffee"
    :synonyms #{"cup", "coffee", "cup of coffee", "steaming", "cappuccino", "cappucino", "capuccino", "capucino"}
    :description (fn []
      (if (has-child :benny self)
        "The picture on the menu board SURE looks good."
        "It smells delicious."))
    :interceptors {
      :before {
        #{:take :drink :taste} (fn []
          (if (has-child :benny self)
            "You should ask Benny for one first."
            (do
              (move-to self :benny)
              (println "You pick up the cup and swallow a mouthful. Benny's WORLDWIDE REPUTATION is well deserved. Just as you finish, Benny takes away the empty cup.")
              (if (get-in @story [:benny :coffee_not_paid]) " \"That will be one quidbuck, sir.\""))))
        #{:buy} (fn []
          (if (has-child :player :coin)
            (binding [noun :coin second :benny]
              (execute :giveSub))
            "You have no money."))
        #{:smell} (fn [] "If your HYPERACTIVE pituitary glands are to be trusted, it's Colombian.")
      }
    }
  }

  :outside_of_toilet {
    :where :cafe
    :name "toilet"
    :synonyms #{"toilet" "bath" "rest" "room" "bathroom" "restroom"}
    :has #{:scenery :openable :enterable}
    :interceptors {
      :before {
        #{:enter} (fn []
          (if (has :toilet_door :open)
            (move-to :player :toilet)
            "Your SUPERB deductive mind detects that the DOOR is CLOSED."))
        #{:examine} (fn []
          (if (has :toilet_door :open)
            "A brilliant thought flashes through your SUPERLATIVE brain: detailed examination of the toilet would be EXTREMELY facilitated if you entered it."
            "With a TREMENDOUS effort of will, you summon your unfathomable ASTRAL VISION and project it FORWARD towards the closed door... until you remember that it's Dr Mystere who's the one with mystic powers."))
        #{:open} (fn []
          (binding [noun :toilet_door]
            (execute :open)))
        #{:close} (fn []
          (binding [noun :toilet_door]
            (execute :close)))
        #{:take :push :pull} (fn [] "That would be PART of the building.")
      }
    }
  }

  :toilet_door {
    :name (fn [] (if (= location :cafe) "door to the toilet" "door to the cafe"))
    :description (fn []
      (if (= location :cafe)
        "A red door with the unequivocal black man-woman silhouettes marking the entrance to hygienic facilities. There is a scribbled note stuck on its surface."
        "A red door with no OUTSTANDING features."))
    :found-in #{:cafe :toilet}
    :synonyms #{"toilet door" "door" "red toilet door"}
    :door-to (fn [] (if (= location :cafe) :toilet :cafe))
    :key :toilet_key
    :has #{:scenery :door :openable :lockable :locked}
    :interceptors {
      :before {
        #{:open} (fn []
          (if (or (has-none self :locked) (not (has-child :player :toilet_key)))
            true
            (binding [noun self second :toilet_key]
              (execute :unlock)
              false)))
        #{:lock} (fn []
          (if (has-none self :open)
            true
            (do
              (println (str "(first closing " (the self) ")\n"))
              (binding [keep-silent true]
                (binding [noun self]
                  (execute :close))
                true))))
      }
      :after {
        #{:unlock} (fn []
          (if (has self :locked)
            false
            (do
              (println (str "You unlock " (the self) " and open it.\n"))
              (binding [keep-silent true]
                (binding [noun self]
                  (execute :open))
                false))))
        #{:open} (fn []
          (add-has :toilet :light)
          true)
        #{:close} (fn []
          (remove-has :toilet :light)
          true)
      }
    }
  }

  :toilet_key {
    :name "toilet key"
    :article "the"
    :synonyms #{"toilet key" "key"}
    :description "Your SUPRA PERCEPTIVE senses detect nothing of consequence about the toilet key."
    :where :benny
    :invent (fn []
       (if (has :clothes :worn)
         "the CRUCIAL key"
         "the used and IRRELEVANT key"))
    :interceptors {
      :before {
        #{:default} (fn []
          (if (has-child :benny self)
            "You SCAN your surroundings with ENHANCED AWARENESS, but fail to detect any key."
            true))
        #{:drop} (fn [] "Benny is trusting you to look after that key.")
      }
    }
  }

  :note {
    :where :cafe
    :name "scribbled note"
    :synonyms #{"scribbled" "note"}
    :description (fn []
      (if (not (get-in @story [:note :read_once]))
        (do
          (swap! story assoc-in [:note :read_once] true)
          "You apply your ENHANCED ULTRAFREQUENCY vision to the note and squint in concentration, giving up only when you see the borders of the note begin to blacken under the incredible intensity of your burning stare. You reflect once more how helpful it would've been if you'd ever learnt to read.\nA kind old lady passes by and explains: \"You have to ask Benny for the key, at the counter.\"\nYou turn quickly and begin, \"Oh, I KNOW that, but...\"\n\"My pleasure, son,\" says the lady, as she exits the cafe.")
        "The scorched undecipherable note holds no SECRETS from you NOW! Ha!"))
    :has #{:scenery}
    :interceptors {
      :before {
        #{:take} (fn [] "No reason to start collecting UNDECIPHERABLE notes.")
      }
    }
    :read_once false ; has the player read the note once?
  }

;  //<!-- ============================================================================== -->

  :toilet {
    :template :room
    :name "Unisex toilet"
    :description "A surprisingly CLEAN square room covered with glazed-ceramic tiles, featuring little more than a lavatory and a light switch. The only exit is south, through the door and into the cafe."
    :s_to :toilet_door
    :has #{:scored}
    :has-not #{:light}
  }

  :light_switch {
    :template :appliance
    :where :toilet
    :name "light switch"
    :synonyms #{"light" "switch"}
    :description "A notorious ACHIEVEMENT of technological SCIENCE, elegant yet EASY to use."
    :interceptors {
      :before {
        #{:push} (fn []
          (let [routine (if (has self :on) :switch-off :switch-on)]
            (binding [noun self]
              (execute routine))))
      }
      :after {
        #{:switch-on} (fn []
          (add-has self :light)
          "You turn on the light in the toilet.")
        #{:switch-off} (fn []
          (remove-has self :light)
          "You turn off the light in the toilet.")
      }
    }
    :has #{:switchable}
    :has-not #{:on} ; TODO remove on if added from template, but clean model up (only needed to override template) - can this be made as a template instrucion?
                    ; e.g. template {:appliance :has-not } ?
  }

  :lavatory {
    :template :appliance
    :where :toilet
    :name "lavatory"
    :synonyms #{"lavatory" "wc" "toilet" "loo" "bowl" "can" "john" "bog"}
    :interceptors {
      :before {
        #{:examine :search :look-under} (fn []
          (if (has-child self :coin)
            (do
              (move-to :coin (parent-for self))
              "The latest user CIVILLY flushed it after use, but failed to pick up the VALUABLE coin that fell from his pants.")))
        #{:receive} (fn []
          "While any other MORTALS might unwittingly throw just about ANYTHING into " (the self) ", you remember the WISE teachings of your mentor, Duke ELEGANT, about elderly plumbing and rising waters.")
      }
    }
  }

  :coin {
    :name "valuable coin"
    :synonyms #{"valuable" "coin" "silver" "quidbuck"}
    :description "It's a genuine SILVER QUIDBUCK."
    :where :lavatory
    :interceptors {
      :before {
        #{:drop} (fn []
          (if (has-child :player self)
            "Such a valuable coin? Har, har! This must be a demonstration of your ULTRA-FLIPPANT jesting!"))
      }
      :after {
        #{:take} (fn [] "You crouch into the SLEEPING DRAGON position and deftly, with PARAMOUNT STEALTH, you pocket the lost coin.")
      }
    }
    :has #{:scored}
  }

;  //<!-- ============================================================================== -->
;  //<!-- The player's possessions -->

  :clothes {
    :where :player
    :name "your clothes"
    :synonyms #{"ordinary" "street" "clothes" "clothing"}
    :description "Perfectly ORDINARY-LOOKING street clothes for a NOBODY like John Covarth."
    :interceptors {
      :before {
        #{:wear} (fn []
          (if (has self :worn)
            "You are already dressed as John Covarth."
            "The town NEEDS the power of Captain FATE, not the anonymity of John Covarth."))
        #{:change :disrobe} (fn []
          (if (not (has self :worn))
            "Your KEEN eye detects that you're no longer wearing them."
            (case location
              :street
                (if (has-child :booth :player)
                  "Lacking Superman's super-speed, you realise that it would be awkward to change in plain view of the passing pedestrians."
                  "In the middle of the street? That would be a PUBLIC SCANDAL, to say nothing of revealing your secret identity.")
              :cafe
                "Benny allows no monkey business in his establishment."
              :toilet
                (cond
                  (has :toilet_door :open) "The door to the bar stands OPEN at tens of curious eyes. You'd be forced to arrest yourself for LEWD conduct."
                  (not (is-light location)) "Last time you changed in the dark, you wore the suit inside out!"
                  :else (do
                    (println "You quickly remove your street clothes and bundle them up together into an INFRA MINUSCULE pack ready for easy transportation.")
                    (if (has :toilet_door :locked)
                      (do
                        (remove-has :clothes :worn)
                        (add-has :costume :worn)
                        "Then you unfold your INVULNERABLE-COTTON costume and turn into Captain FATE, defender of free will, adversary of tyranny!")
                      (do
                        (println "Just as you are slipping into Captain FATE's costume, the door opens and a young woman enters. She looks at you and starts screaming, \"RAPIST! NAKED RAPIST IN THE TOILET!!!\"\n\n Everybody in the cafe quickly comes to the rescue, only to find you ridiculously jumping on one leg while trying to get dressed. Their laughter brings a QUICK END to your crime-fighting career!")
                        (end-game "death")))))
              :else
                "There must be better places to change your clothes!"))) ; this _should_ never happen...
      }
    }
    :has #{:clothing :proper :pluralname :worn}
  }

  :costume {
    :where :player
    :name "your costume"
    :synonyms #{"captain" "captain's" "fate" "fate's" "costume" "suit"}
    :description "STATE OF THE ART manufacture, from chemically reinforced 100% COTTON-lastic(tm)."
    :interceptors {
      :before {
        #{:wear} (fn []
          (if (has self :worn)
            "You are already dressed as Captain FATE."
            "First you'd have to take off your commonplace unassuming John Covarth INCOGNITO street clothes."))
        #{:change :disrobe} (fn []
          (if (has self :worn)
            "You need to wear your costume to FIGHT crime!"
            "But you're not yet wearing it!"))
        #{:drop} (fn []
          "Your UNIQUE Captain FATE multi-coloured costume? The most coveted clothing ITEM in the whole city? Certainly NOT!")
      }
    }
    :has #{:clothing :proper}
  }


;  //<!-- ============================================================================== -->

  :max-score 2
  :object-score 1
  :room-score 1

  :initial (fn []
    (println "\n\nImpersonating mild mannered John Covarth, assistant help boy at an insignificant drugstore, you suddenly STOP when your acute hearing deciphers a stray radio call from the POLICE. There's some MADMAN attacking the population in Granary Park! You must change into your Captain FATE costume fast...!\n\n")
    (move-to :player :street)
  )

  :rules [
    (fn []
      (when (and (has-child :toilet :player) (not (is-light :toilet)))
        (place-in-scope :light_switch)
        (place-in-scope :toilet_door)))
  ]

 :routines {
    :change (fn []
      (cond
        (not noun) "What do you want to change?"
        :else (str (if (has noun :pluralname) "They're" "That's") " not something you must change to save the day.")))
  }

  :verbs {
    ["change" "exchange" "swap" "swop"] {
      ""             :change
      "%{noun,noun}" :change}
  }
}
