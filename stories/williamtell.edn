;; Sample Story
;;
;; Based on: http://www.inform-fiction.org/manual/about_ibg.html --

;;

(refer 'textad.main)

(defn bow-or-arrow [o]
  (if (or (not second) (= second :bow) (= second :arrow))
  true
  (do (println "That's an unlikely weapon isn't it?\n") false)))

{
  :name "William Tell"
  :description "A small example of how to write interactive fiction"

  :debug true


  ; -- Templates --------------------------------

  :room {
    :has #{:light}
  }

  :prop {
    :has #{:scenery}
    :interceptors {
      :before {
        #{:examine} (fn [] true)
        #{:default} (fn [] (str "You don't need to worry about " (the self) "."))
      }
    }
  }

  :furniture {
    :has #{:static :supporter}
    :interceptors {
      :before {
        #{:take :pull :push :push-dir} (fn [] (str (The self) " is too heavy for that."))
      }
    }
  }

  ; non playing characters
  :npc {
    :has #{:animate}
    :interceptors {
      :life {
        #{:answer :ask :order :tell} (fn [] (str "Just talk to " (the self) "."))
      }
    }
  }

  ; -- game objects  ----------------------------

  :street {
    :template :room
    :name"A street in Altdorf"
    :description (fn []
      (println "The narrow street runs north towards the town square. Local folk are pouring into the town through the gate to the south, shouting greetings, offering produce for sale, exchanging news, enquiring with exaggerated disbelief about the prices of the goods displayed by merchants whose stalls make progress even more difficult.") +
      (if (has-none self :visited) (println "\n\"Stay close to me, son,\" you say, \"or you'll get lost among all these people.\"")))
    :n_to :below_square
    :s_to "The crowd, pressing north towards the square, makes that impossible."
  }

  :south_gate {
    :template :prop
    :name "south gate"
    :synonyms #{"south" "southern" "wooden" "gate"}
    :description "The large wooden gate in the town walls is wide open."
    :has #{:fixed}
  }

  :assorted_stalls {
    :template :prop
    :name "assorted stalls"
    :synonyms #{"assorted" "stalls"}
    :description "Food, clothing, mountain gear; the usual stuff."
    :found-in #{:street :below_square}
    :has #{:fixed :pluralname}
  }

  :produce {
    :template :prop
    :name "produce"
    :synonyms #{"goods" "produce" "food" "clothing" "mountain" "gear" "stuff"}
    :description "Nothing special catches your eye."
    :found-in #{:street :below_square}
    :has #{:fixed :pluralname}
  }

  :merchants {
    :template :prop
    :name "merchants"
    :synonyms #{"merchant" "merchants" "trader" "traders"}
    :description "A few crooks, but mostly decent traders touting their wares with raucous overstatement."
    :found-in #{:street :below_square}
    :has #{:fixed :pluralname}
  }

  :local_people {
    :template :prop
    :name "local people"
    :synonyms #{"people" "folk" "local" "crowd"}
    :description "Mountain folk, just like yourself."
    :found-in true ; TODO or should be function that evaluates to true?
    :has #{:fixed :pluralname :animate}
  }


  ; ------------------------------------------------------------------------------------------

  :below_square {
    :template :room
    :name "Further along the street"
    :description "People are still pushing and shoving their way from the southern gate towards the town square, just a little further north. You recognise the owner of a fruit and vegetable stall."
    :n_to :south_square
    :s_to :street
  }

  :stall {
    :template :furniture
    :where :below_square
    :name "fruit and vegetable stall"
    :synonyms #{"fruit" "veg" "vegetable" "stall" "table"}
    :description "It's really only a small table, with a big heap of potatoes, some carrots and turnips, and a few apples."
    :has #{:scenery}
    :interceptors {
      :before {
;        :search (fn [] (examine self))
      }
    }
  }

  :potatoes {
    :template :prop
    :where :below_square
    :name "potatoes"
    :synonyms #{"potato" "potatoes" "spuds"}
    :description "Must be a particularly early variety... by some 300 years!"
    :has #{:pluralname}
  }

  :fruit_veg {
    :template :prop
    :where :below_square
    :name "fruit and vegetables"
    :synonyms #{"carrot" "carrots" "turnip" "turnips" "apples" "vegetables"}
    :description "Fine locally grown produce."
    :has #{:pluralname}
  }

  :stallholder {
    :template :npc
    :where :below_square
    :name "Helga"
    :synonyms #{"stallholder" "greengrocer" "monger" "shopkeeper" "merchant" "owner" "Helga" "dress" "scarf" "headscarf"}
    :description "Helga is a plump, cheerful woman, concealed beneath a shapeless dress and a spotted headscarf."
    :has #{:female :proper}
    :initial (fn []
      (println "Helga pauses from sorting potatoes to give you a cheery wave.\n")
      (when (has-none location :visited)
        (println "\"Hello, Wilhelm, it's a fine day for trade! Is this young Walter? My, how he's grown. Here's an apple for him -- tell him to mind that scabby part, but the rest's good enough. How's Frau Tell? Give her my best wishes.\"\n")
        (move-to :apple :player)
        (swap! story assoc-in [:stallholder :times_spoken_to] 0)
      ))
    :interceptors {
      :life {
        #{:kiss} "\nOoh, you saucy thing!\n\n"
        #{:talk} (fn [] (case (get-in @story [:stallholder :times_spoken_to])
          0 (do
              (println "You warmly thank Helga for the apple.\n")
              (swap! story update-in [:stallholder :times_spoken_to] inc)
              (add-score 1))
          1 (do
              (println "\"See you again soon.\"")
              (swap! story update-in [:stallholder :times_spoken_to] inc))
          true))
      }
    }
  }

  ; ------------------------------------------------------------------------------------------

  :south_square {
    :template :room
    :name "South Square"
    :description "The narrow street to the south has opened onto the town square, and resumes at the far side of this cobbled meeting place. To continue along the street towards your destination -- Johansson's tannery -- you must walk north across the square, in the middle of which you see Gessler's hat set on that loathsome pole. If you go on, there's no way you can avoid passing it. Imperial soldiers jostle rudely through the throng, pushing, kicking and swearing loudly."
    :n_to :mid_square
    :s_to :below_square
  }

  :anon_pole {
    :template :prop
    :name "pole"
    :synonyms #{"wooden" "pole"}
    :description "You're too far away to see any detail."
    :found-in #{:south_square :north_square}
  }

  :anon_hat {
    :template :prop
    :name "hat"
    :description "You're too far away to see any detail."
    :synonyms #{"hat"}
    :found-in #{:south_square :north_square}
  }

  :prop4 {
    :template :prop
    :name "Gessler's soldiers"
    :synonyms #{"soldier" "soldiers" "guard" "guards"}
    :description "They're uncouth, violent men, not from around here."
    :found-in #{:south_square :mid_square :north_square :marketplace}
    :has #{:animate :pluralname :proper}
    :interceptors {
      :before {
        #{:fire-at} "You're outnumbered many times."
        #{:talk} "Such scum are beneath your contempt."
      }
    }
  }

  ; ------------------------------------------------------------------------------------------

  :mid_square {
    :template :room
    :name "Middle of the square"
    :description "There is less of a crush in the middle of the square; most people prefer to keep as far away as possible from the pole which towers here, topped with that absurd ceremonial hat. A group of soldiers stands nearby, watching everyone who passes."
    :n_to :north_square
    :s_to :south_square
    :warnings_count 0 ; for counting the soldier's warnings
    :initial (fn []
      (swap! story assoc-in [:pole :has_been_saluted] false)
    )
    :interceptors {
      :before {
        #{:go} (fn [] (case noun
          :s_to ; TODO noun should be :s not :s_to?
            (do
              (swap! story assoc-in [:mid_square :warnings_count] 0)
              (swap! story assoc-in [:pole :has_been_saluted] false)
              true)
          :n_to
            (if (get-in @story [:pole :has_been_saluted])
              (do
                (println "\n\"Be sure to have a nice day.\"\n")
                true)
              (do
                (case (get-in @story [:mid_square :warnings_count])
                  0 (do
                      (swap! story update-in [:mid_square :warnings_count] inc)
                      (println "A soldier bars your way.\n")
                      (println "\"Oi, you, lofty; forgot yer manners, didn't you? How's about a nice salute for the vogt's hat?\"\n"))
                  1 (do
                      (swap! story update-in [:mid_square :warnings_count] inc)
                      (println "\n\"I know you, Tell, yer a troublemaker, ain't you? Well, we don't want no bovver here, so just be a good boy and salute the friggin' hat. Do it now: I ain't gonna ask you again...\"\n"))
                  (do
                    (println "\n\"Ok, Tell, now you're in real trouble. I asked you nice, but you was too proud and too stupid. I think it's time that the vogt had a little word with you.\"\n")
                    (println "And with that the soldiers seize you and Walter and, while the sergeant hurries off to fetch Gessler, the rest drag you roughly towards the old lime tree growing in the marketplace.\n")
                    (move-to :apple :son)
                    (move-to :player :marketplace)))))
          true))
      }
    }
  }

  :pole {
    :template :furniture
    :where :mid_square
    :name "hat on a pole"
    :synonyms #{"wooden", "pole", "pine", "hat", "black", "red", "brim", "feathers"}
    :description "The pole, the trunk of a small pine some few inches in diameter, stands about nine or ten feet high. Set carefully on top is Gessler's ludicrous black and red leather hat, with a widely curving brim and a cluster of dyed goose feathers."
    :has #{:scenery}
    :has_been_saluted false
    :interceptors {
      :before {
        #{:fire-at} "Tempting, but you're not looking for trouble."
        #{:salute} (fn []
          (swap! story assoc-in [:pole :has_been_saluted] true)
          (println "You salute the hat on the pole. \n\n \"Why, thank you, sir,\" sneers the soldier.\n"))
      }
    }
  }

  ; ------------------------------------------------------------------------------------------

  :north_square {
    :template :room
    :name "North side of the square"
    :description "A narrow street leads north from the cobbled square. In its centre, a little way south, you catch a last glimpse of the pole and hat."
    :n_to (fn []
      (println "With Walter at your side, you leave the square by the north street, heading for Johansson's tannery.\n")
      (println "You have screwed up a favourite folk story\n")
      (end-game "death"))
    :s_to "You hardly feel like going through all that again."
  }

  ; ------------------------------------------------------------------------------------------

  :marketplace {
    :template :room
    :name "Marketplace near the square"
    :description "Altdorf's marketplace, close by the town square, has been hastily cleared of stalls. A troop of soldiers has pushed back the crowd to leave a clear space in front of the lime tree, which has been growing here for as long as anybody can remember. Usually it provides shade for the old men of the town, who gather below to gossip, watch the girls, and play cards. Today, though, it stands alone... apart, that is, from Walter, who has been lashed to the trunk. About forty yards away, you are restrained by two of the vogt's men."
    :messages {:cant-go "What? And leave your son tied up here?"}
  }

  :tree {
    :where :marketplace
    :name "lime tree"
    :synonyms #{"lime" "tree"}
    :description "It's just a large tree."
    :has #{:scenery}
    :interceptors {
      :before {
        #{:fire-at} (fn []
          (if (bow-or-arrow second)
            (do
              (println "Your hand shakes a little, and your arrow flies high, hitting the trunk a few inches above Walter's head.\n")
              (end-game "victory"))))
      }
    }
  }

  :governor {
    :template :npc
    :where :marketplace
    :name "governor"
    :synonyms #{"governor" "vogt" "Hermann" "Gessler"}
    :description "Short, stout but with a thin, mean face, Gessler relishes the power he holds over the local community."
    :has #{:male}
    :initial (fn []
      (println "Gessler is watching from a safe distance, a sneer on his face.")
      (if (has-none location :visited)
        (println "\n\"It appears that you need to be taught a lesson, fool. Nobody shall pass through the square without paying homage to His Imperial Highness Albert; nobody, hear me? I could have you beheaded for treason, but I'm going to be lenient. If you should be so foolish again, you can expect no mercy, but this time, I'll let you go free... just as soon as you demonstrate your archery skills by hitting this apple from where you stand. That shouldn't prove too difficult; here, sergeant, catch. Balance it on the little bastard's head.\"\n")))
    :interceptors {
      :life {
        #{:talk} "You cannot bring yourself to speak to him."
      }
      :before {
        #{:fire-at} (fn []
          (if (bow-or-arrow second)
            (do
              (println "Before the startled soldiers can react, you turn and fire at Gessler; your arrow pierces his heart, and he dies messily. A gasp, and then a cheer, goes up from the crowd.\n")
              (end-game "victory"))))
      }
    }
  }

  ; ------------------------------------------------------------------------------------------
  ; The players possessions

  :bow {
    :where :player
    :name "bow"
    :synonyms #{"bow"}
    :description "Your trusty yew bow, strung with flax."
    has #{:clothing :worn}
    :interceptors {
      :before {
        #{:drop :give :throw-at} (fn [] "You're never without your trusty bow.")
      }
    }
  }

  :quiver {
    :where :player
    :name "quiver"
    :synonyms #{"quiver"}
    :description "Made of goatskin, it usually hangs over your left shoulder."
    :has #{:clothing :container :openable :open :worn}
    :interceptors {
      :before {
        #{:drop :give :throw} (fn [] "But it was a present from Hedwig, your wife.")
      }
    }
  }

  ; TODO we want three of these
  :arrow {
    :where :quiver
    :name "arrow"
    :synonyms #{"arrow"}
    :description "Just like all your other arrows -- sharp and true."
    :interceptors {
      :before {
        #{:drop :give :throw-at} (fn [] "Your arrows are sharp, and you guard them carefully.")
      }
    }
  }

  :son {
    :template :npc
    :name "your son"
    :synonyms #{"son" "boy" "lad" "Walter"}
    :description (fn []
      (if (= location :marketplace)
        "He stares at you, trying to appear brave and remain still. His arms are pulled back and tied behind the trunk, and the apple nestles amid his blond hair."
        "A quiet, blond lad of eight summers, he's fast learning the ways of mountain folk."))
    :found-in true
    :has #{:male :proper :scenery :transparent}
    :interceptors {
      :life {
        #{:give} (fn []
          (move-to noun :son)
          (println "\"Thank you, Papa.\"")
          (add-score 1))
        #{:talk} (fn []
          (if (= location :marketplace)
            "\"Stay calm, my son, and trust in God.\""
            "You point out a few interesting sights."))
      }
      :before {
        #{:examine :listen :salute :talk} #(-> true)
        #{:fire-at} (fn []
          (if (= location :marketplace)
            (if (bow-or-arrow second)
              (do
                (println "Oops! Surely you didn't mean to do that?\n")
                (end-game "death")))
            true))
        [:default] (fn []
          (if (= location :marketplace) "Your guards won't permit it." true))
      }
    }
  }

  :apple {
    :where :marketplace
    :name "apple"
    :synonyms #{"apple"}
    :description (fn []
      (if (= location :marketplace)
        "At this distance you can barely see it.\n"
        "The apple is blotchy green and brown.\n"))
    :has #{:animate :male :scenery}
    :interceptors {
      :before {
        #{:drop} "An apple is worth quite a bit -- better hang on to it."
        #{:eat} "Helga intended it for Walter..."
        #{:fire-at} (fn []
          (if (= location :marketplace)
            (if (bow-or-arrow second)
              (do
                (add-score 1)
                (println "Slowly and steadily, you place an arrow in the bow, draw back the string, and take aim with more care than ever in your life. Holding your breath, unblinking, fearful, you release the arrow. It flies across the square towards your son, and drives the apple against the trunk of the tree. The crowd erupts with joy; Gessler looks distinctly disappointed.\n")
                 (end-game "victory")))
            true))
      }
    }
  }

  ; ------------------------------------------------------------------------------------------

  :max-score 3

  :player {
    :description "You wear the traditional clothing of a Swiss mountaineer."
  }

  :initial (fn []
    (println "\n\nThe place: Altdorf, in the Swiss canton of Uri. The year is 1307, at which time Switzerland is under rule by the Emperor Albert of Habsburg. His local governor -- the vogt -- is the bullying Hermann Gessler, who has placed his hat atop a wooden pole in the centre of the town square; everybody who passes through the square must bow to this hated symbol of imperial might.")
    (println "\n\nYou have come from your cottage high in the mountains, accompanied by your younger son, to purchase provisions. You are a proud and independent man, a hunter and guide, renowned both for your skill as an archer and, perhaps unwisely (for his soldiers are everywhere), for failing to hide your dislike of the vogt.")
    (println "\n\nIt's market-day: the town is packed with people from the surrounding villages and settlements.\n\n")
    (move-to :player :street)
    "")

  :routines {

    :untie (fn [] "You really shouldn't try that.")

    :salute (fn []
      (cond
        (has noun :animate) (str (The noun) " acknowledges you.")
        :else               (str (The noun) " takes no notice.")))

    :talk (fn []
      (cond
        (not noun)            "What do you want to talk to?\n"
        (= :player noun)      "Nothing you hear surprises you.\n"
        (run-life noun :talk) "At the moment, you can't think of anything to say.\n"
        :else false))

    :fire-at (fn []
      (cond
        (not noun)            "What, just fire off an arrow at random?\n"
        (bow-or-arrow second) "Pretty dangerous, don't you think?\n"
        :else false))
  }

  :verbs {

    ["untie" "unfasten" "unfix" "free" "release"] {
      ""             :untie
      "%{noun,noun}" :untie}

    ["bow" "nod" "kowtow" "genulect" "wave"] {
      "(at|to|towards) %{noun,noun}" :salute}

    ["salute" "greet" "acknowledge"] {
      ""             :salute
      "%{noun,noun}" :salute}

    ["talk" "converse" "chat" "gossip"] {
      ""                           :talk
      "(to|with) %{noun,creature}" :talk
      "%{noun,creature}"           :talk}   ; TODO gives the message "can only do that to something animate" - message should be better, but also default interceptor would be better "You don't need to worry about the merchants" - maybe the parsing of the type should only happen when "noun" is first accessed?

    ["fire" "shoot" "aim"] {
      ""                                     :fire-at
      "at %{noun,noun} with %{second,noun}"  :fire-at
      "at %{noun,noun}"                      :fire-at
      "%{noun,noun} with %{second,noun}"     :fire-at
      "%{second,noun} at %{noun,noun}"       :fire-at
      "%{noun,noun}"                         :fire-at}
  }

}
